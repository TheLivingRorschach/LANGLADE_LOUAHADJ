class MotionPlanner:
  def __init__ (self, robot, ps):
    self.robot = robot
    self.ps = ps

  def solveBiRRT (self, maxIter = float("inf")):
    print ("Method solveBiRRT is not implemented yet")
    self.ps.prepareSolveStepByStep ()
    finished = False
    # In the framework of the course, we restrict ourselves to 2 connected components.
    nbCC = self.ps.numberConnectedComponents ()
    if nbCC != 2:
      raise Exception ("There should be 2 connected components.")
    iter = 0
    while True:


      #### RRT begin
      newConfigs = list ()
      ## Try connecting the new nodes together
      Qrand = self.robot.shootRandomConfig()
      for i in range (len(newConfigs)):
        Qnear,d=ps.getNearestConfig(Qrand,connectedComponentId=-1)
        validity, path_id, _ = self.ps.directPath(i, Qnear, True) # Testing for collisions
        Q_new = ps.configAtParam(path_id, ps.pathLength (path_id)) # Getting new config
	ps.addConfigToRoadmap(Q_new) # Add config to current roadmap
	ps.addEdgeToRoadmap(i, Qnear, path_Id, False) # Adds an edge in current road map between current config. and nearest config.

	
	
	
      #### RRT end



      ## Check if the problem is solved.
      nbCC = self.ps.numberConnectedComponents ()
      if nbCC == 1:
        # Problem solved
        finished = True
        break
      iter = iter + 1
      if iter > maxIter:
        break
    if finished:
        self.ps.finishSolveStepByStep ()
        return self.ps.numberPaths () - 1

  def solvePRM (self):
    self.ps.prepareSolveStepByStep()
    #### PRM begin


    #### PRM end
    self.ps.finishSolveStepByStep()
